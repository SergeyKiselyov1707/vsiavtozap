import asyncio
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
from telegram import Update, ReplyKeyboardMarkup
from db import init_db, save_request

TOKEN = "–í–°–¢–ê–í_–¢–£–¢_–°–í–Ü–ô_–¢–û–ö–ï–ù"
MANAGER_CHAT_ID = -5576243097  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π chat_id —Å—É–ø–µ—Ä–≥—Ä—É–ø–∏

ASK_AUTO = 1
ASK_PARTS = 2

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –í–∫–∞–∂—ñ—Ç—å –¥–∞–Ω—ñ –ø—Ä–æ –∞–≤—Ç–æ –∞–±–æ —Ñ–æ—Ç–æ VIN-–∫–æ–¥—É:")
    return ASK_AUTO

async def ask_auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['auto_info'] = update.message.text or "(–Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É)"
    await update.message.reply_text("–Ø–∫—ñ —Å–∞–º–µ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ?")
    return ASK_PARTS

async def ask_parts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    parts = update.message.text
    auto_info = context.user_data.get('auto_info')

    caption = f"–ó–∞–ø–∏—Ç –≤—ñ–¥ @{user.username or user.first_name} ({user.id}):\n\n–ê–≤—Ç–æ: {auto_info}\n–ó–∞–ø—á–∞—Å—Ç–∏–Ω–∏: {parts}"
    await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=caption)

    await save_request(user.id, user.username, auto_info, parts)

    contact_button = ReplyKeyboardMarkup([["–ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]], resize_keyboard=True)
    await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.", reply_markup=contact_button)

    return ConversationHandler.END

async def contact_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìû –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

async def main():
    await init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_AUTO: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_auto)],
            ASK_PARTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_parts)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex("–ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"), contact_manager))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await app.run_polling()

if __name__ == "__main__":
    try:
        asyncio.get_event_loop().run_until_complete(main())
    except RuntimeError as e:
        if str(e).startswith('This event loop is already running'):
            import nest_asyncio
            nest_asyncio.apply()
            asyncio.run(main())
        else:
            raise
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
