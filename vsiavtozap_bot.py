import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
import aiosqlite
from datetime import datetime

TOKEN = "8080216198:AAEi07ywy8olOrbDdbxSwF-VOxQ4DCN1VCM"
MANAGER_CHAT_ID = -5576243097  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π
ASK_CAR, ASK_PARTS = range(2)

# –í–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ SQLite
async def init_db():
    async with aiosqlite.connect("requests.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                car_info TEXT,
                parts_needed TEXT,
                timestamp TEXT
            )
        """)
        await db.commit()

# –°—Ç–∞—Ä—Ç: –∑–∞–ø–∏—Ç—É—î–º–æ —ñ–Ω—Ñ–æ –ø—Ä–æ –∞–≤—Ç–æ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–Ω—ñ –ø—Ä–æ –∞–≤—Ç–æ (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, —Ä—ñ–∫, –æ–±‚Äô—î–º –∞–±–æ —Ñ–æ—Ç–æ VIN-–∫–æ–¥—É)."
    )
    return ASK_CAR

# –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∞–≤—Ç–æ
async def receive_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['car_info'] = update.message.text or "(—Ñ–æ—Ç–æ)"
    await update.message.reply_text("–Ø–∫—ñ —Å–∞–º–µ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å?")
    return ASK_PARTS

# –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–ª—ñ–∫ –∑–∞–ø—á–∞—Å—Ç–∏–Ω —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É
async def receive_parts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    car_info = context.user_data.get('car_info')
    parts = update.message.text

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
    async with aiosqlite.connect("requests.db") as db:
        await db.execute("""
            INSERT INTO requests (user_id, username, car_info, parts_needed, timestamp)
            VALUES (?, ?, ?, ?, ?)
        """, (
            user.id,
            user.username,
            car_info,
            parts,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ))
        await db.commit()

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    caption = (
        f"üîî –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ @{user.username or user.first_name} ({user.id}):\n\n"
        f"üöó –ê–≤—Ç–æ: {car_info}\n"
        f"üß© –ó–∞–ø—á–∞—Å—Ç–∏–Ω–∏: {parts}"
    )
    await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=caption)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–≤‚Äô—è–∑–∫—É –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    keyboard = [
        [InlineKeyboardButton("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/Vsiavtozap")]  # –ó–∞–º—ñ–Ω–∏—Ç–∏
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏.", reply_markup=reply_markup)
    context.user_data.clear()
    return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

# –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —É—Å—ñ—Ö —Ç–µ–∫—Å—Ç—ñ–≤ ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —è–∫ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç
async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)
    return ASK_CAR

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
async def main():
    await init_db()

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_CAR: [MessageHandler(filters.TEXT | filters.PHOTO, receive_car)],
            ASK_PARTS: [MessageHandler(filters.TEXT, receive_parts)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        per_user=True,
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ ‚úÖ")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
