import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from db import init_db, save_request

TOKEN = "8080216198:AAEi07ywy8olOrbDdbxSwF-VOxQ4DCN1VCM"
MANAGER_CHAT_ID = 5576243097  # –≤–∞—à ID —á–∞—Ç—É
ASK_PARTS = 1

# –ö–Ω–æ–ø–∫–∞ –∑–≤'—è–∑–∫—É –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
def get_contact_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîß –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/Vsiavtozap")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –∞–≤—Ç–æ (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, —Ä—ñ–∫, –æ–±'—î–º –∞–±–æ —Ñ–æ—Ç–æ VIN-–∫–æ–¥—É)."
    )
    return ASK_PARTS

async def ask_parts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text or ""
    photo = update.message.photo

    if photo:
        file_id = photo[-1].file_id
        context.user_data['auto_photo'] = file_id
        context.user_data['auto_text'] = None
    else:
        context.user_data['auto_text'] = text
        context.user_data['auto_photo'] = None

    await update.message.reply_text("–Ø–∫—ñ —Å–∞–º–µ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å?")
    return ConversationHandler.END

async def handle_parts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    parts_text = update.message.text or "(–Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É)"
    auto_text = context.user_data.get('auto_text')
    auto_photo = context.user_data.get('auto_photo')

    caption = f"–ó–∞–ø–∏—Ç –≤—ñ–¥ @{user.username or user.first_name} ({user.id}):\n"
    if auto_text:
        caption += f"–Ü–Ω—Ñ–æ –ø—Ä–æ –∞–≤—Ç–æ:\n{auto_text}\n"
    if auto_photo:
        caption += "–§–æ—Ç–æ VIN-–∫–æ–¥—É –¥–æ–¥–∞–Ω–æ.\n"
    caption += f"–ó–∞–ø—á–∞—Å—Ç–∏–Ω–∏:\n{parts_text}"

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
    if auto_photo:
        await context.bot.send_photo(chat_id=MANAGER_CHAT_ID, photo=auto_photo, caption=caption)
    else:
        await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=caption)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
    await save_request(user.id, user.username, auto_text or "[–§–æ—Ç–æ VIN]", parts_text)

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É
    await update.message.reply_text(
        "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
        reply_markup=get_contact_keyboard()
    )

    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

async def main():
    await init_db()

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_PARTS: [MessageHandler(filters.TEXT | filters.PHOTO, ask_parts)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_parts))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
